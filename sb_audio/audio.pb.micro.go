// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: audio.proto

package sb_audio

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Server service

func NewServerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Server service

type ServerService interface {
	GetCapabilities(ctx context.Context, in *None, opts ...client.CallOption) (*Capabilities, error)
	GetState(ctx context.Context, in *None, opts ...client.CallOption) (*State, error)
	StartStream(ctx context.Context, in *None, opts ...client.CallOption) (*None, error)
	StopStream(ctx context.Context, in *None, opts ...client.CallOption) (*None, error)
	Ping(ctx context.Context, in *PingPong, opts ...client.CallOption) (*PingPong, error)
}

type serverService struct {
	c    client.Client
	name string
}

func NewServerService(name string, c client.Client) ServerService {
	return &serverService{
		c:    c,
		name: name,
	}
}

func (c *serverService) GetCapabilities(ctx context.Context, in *None, opts ...client.CallOption) (*Capabilities, error) {
	req := c.c.NewRequest(c.name, "Server.GetCapabilities", in)
	out := new(Capabilities)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) GetState(ctx context.Context, in *None, opts ...client.CallOption) (*State, error) {
	req := c.c.NewRequest(c.name, "Server.GetState", in)
	out := new(State)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) StartStream(ctx context.Context, in *None, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.name, "Server.StartStream", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) StopStream(ctx context.Context, in *None, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.name, "Server.StopStream", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Ping(ctx context.Context, in *PingPong, opts ...client.CallOption) (*PingPong, error) {
	req := c.c.NewRequest(c.name, "Server.Ping", in)
	out := new(PingPong)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Server service

type ServerHandler interface {
	GetCapabilities(context.Context, *None, *Capabilities) error
	GetState(context.Context, *None, *State) error
	StartStream(context.Context, *None, *None) error
	StopStream(context.Context, *None, *None) error
	Ping(context.Context, *PingPong, *PingPong) error
}

func RegisterServerHandler(s server.Server, hdlr ServerHandler, opts ...server.HandlerOption) error {
	type server interface {
		GetCapabilities(ctx context.Context, in *None, out *Capabilities) error
		GetState(ctx context.Context, in *None, out *State) error
		StartStream(ctx context.Context, in *None, out *None) error
		StopStream(ctx context.Context, in *None, out *None) error
		Ping(ctx context.Context, in *PingPong, out *PingPong) error
	}
	type Server struct {
		server
	}
	h := &serverHandler{hdlr}
	return s.Handle(s.NewHandler(&Server{h}, opts...))
}

type serverHandler struct {
	ServerHandler
}

func (h *serverHandler) GetCapabilities(ctx context.Context, in *None, out *Capabilities) error {
	return h.ServerHandler.GetCapabilities(ctx, in, out)
}

func (h *serverHandler) GetState(ctx context.Context, in *None, out *State) error {
	return h.ServerHandler.GetState(ctx, in, out)
}

func (h *serverHandler) StartStream(ctx context.Context, in *None, out *None) error {
	return h.ServerHandler.StartStream(ctx, in, out)
}

func (h *serverHandler) StopStream(ctx context.Context, in *None, out *None) error {
	return h.ServerHandler.StopStream(ctx, in, out)
}

func (h *serverHandler) Ping(ctx context.Context, in *PingPong, out *PingPong) error {
	return h.ServerHandler.Ping(ctx, in, out)
}
